buildscript {
	repositories {
		maven { url = 'https://maven.minecraftforge.net' }
		maven {
			url = 'https://repo.spongepowered.org/repository/maven-public/'
			content { includeGroup "org.spongepowered" }
		}
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
	}
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'org.spongepowered.mixin'

version = "${mc_version}-${mod_version}"
group = mod_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

mixin {
	// MixinGradle Settings
	add sourceSets.main, 'mixins.brewersdelight.refmap.json'
	config 'mixins.brewersdelight.json'
	
	// Specify options for dev run configs
	//debug.verbose = true
	//debug.export = true
	//dumpTargetOnFailure = true
}

minecraft {
	mappings channel: 'official', version: "${mc_version}"
	
	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.
	
	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs {
		client {
			workingDirectory project.file('run')
			
			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			
			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'
			
			// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			property 'forge.enabledGameTestNamespaces', 'brewersdelight'
			
			mods {
				brewersdelight {
					source sourceSets.main
				}
			}
		}
		
		server {
			workingDirectory project.file('run')
			
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			
			property 'forge.logging.console.level', 'debug'
			
			// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			property 'forge.enabledGameTestNamespaces', 'brewersdelight'
			
			mods {
				brewersdelight {
					source sourceSets.main
				}
			}
		}
		
		// This run config launches GameTestServer and runs all registered gametests, then exits.
		// By default, the server will crash when no gametests are provided.
		// The gametest system is also enabled by default for other run configs under the /test command.
		gameTestServer {
			workingDirectory project.file('run')
			
			// Recommended logging data for a userdev environment
			// The markers can be added/remove as needed separated by commas.
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			property 'forge.logging.markers', 'REGISTRIES'
			
			// Recommended logging level for the console
			// You can set various levels here.
			// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
			property 'forge.logging.console.level', 'debug'
			
			// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			property 'forge.enabledGameTestNamespaces', 'brewersdelight'
			
			mods {
				brewersdelight {
					source sourceSets.main
				}
			}
		}
		
		data {
			workingDirectory project.file('run')
			
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			
			property 'forge.logging.console.level', 'debug'
			
			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			args '--mod', 'brewersdelight', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
			
			environment 'target', 'fmluserdevdata'
			
			mods {
				brewersdelight {
					source sourceSets.main
				}
			}
		}
	}
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	// Put repositories for dependencies here
	// ForgeGradle automatically adds the Forge maven and Maven Central for you
	
	maven { url "https://www.cursemaven.com" }
	
	// If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
	// flatDir {
	//     dir 'libs'
	// }
}

dependencies {
	// Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
	// that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
	// The userdev artifact is a special name and will get all sorts of transformations applied to it.
	minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
	
	// Apply Mixin AP
	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
	
	implementation fg.deobf("curse.maven:farmers-delight-398521:${farmersdelight_version}")
	implementation fg.deobf("curse.maven:brewin-and-chewin-637808:${brewinandchewin_version}")
	
	runtimeOnly fg.deobf("curse.maven:jei-238222:${jei_version}")
	
	// Real mod deobf dependency examples - these get remapped to your current mappings
	// compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
	// runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
	// implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency
	
	// Examples using mod jars from ./libs
	// implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")
	
	// For more info...
	// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
	// http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
	manifest {
		attributes([
				"Specification-Title"     : "${mod_id}",
				"Specification-Vendor"    : "pupkin2001",
				"Specification-Version"   : "1", // We are version 1 of ourselves
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : project.jar.archiveVersion,
				"Implementation-Vendor"   : "pupkin2001",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

//publishing {
//	publications {
//		mavenJava(MavenPublication) {
//			artifact jar
//		}
//	}
//	repositories {
//		maven {
//			url "file://${project.projectDir}/mcmodsrepo"
//		}
//	}
//}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
