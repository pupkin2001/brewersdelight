plugins {
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.minecraftforge.gradle' version '[6.0,6.2)'
	id 'org.spongepowered.mixin' version '0.7.+'
}

version = mod_version
group = mod_group_id


mixin {
	// MixinGradle Settings
	add sourceSets.main, 'mixins.brewersdelight.refmap.json'
	config 'mixins.brewersdelight.json'
	
	// Specify options for dev run configs
	//debug.verbose = true
	//debug.export = true
	//dumpTargetOnFailure = true
}

base {
	archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
	mappings channel: 'official', version: "${minecraft_version}"
	
	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.
	
	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	mappings channel: mapping_channel, version: minecraft_version
	
	copyIdeResources = true
	
	runs {
		configureEach {
			workingDirectory project.file('run')
			
			property 'forge.logging.markers', 'REGISTRIES'
			
			property 'forge.logging.console.level', 'debug'
			
			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}
		
		client {
			// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			property 'forge.enabledGameTestNamespaces', mod_id
		}
		
		server {
			property 'forge.enabledGameTestNamespaces', mod_id
			args '--nogui'
		}
		
		// This run config launches GameTestServer and runs all registered gametests, then exits.
		// By default, the server will crash when no gametests are provided.
		// The gametest system is also enabled by default for other run configs under the /test command.
		gameTestServer {
			property 'forge.enabledGameTestNamespaces', mod_id
		}
		
		data {
			// example of overriding the workingDirectory set in configureEach above
			workingDirectory project.file('run-data')
			
			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
		}
	}
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	// Put repositories for dependencies here
	// ForgeGradle automatically adds the Forge maven and Maven Central for you
	
	maven { url "https://www.cursemaven.com" }
	
	// If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
	// flatDir {
	//     dir 'libs'
	// }
	
	flatDir {
		dir 'libs'
	}
}

dependencies {
	// Specify the version of Minecraft to use.
	// Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
	// The "userdev" classifier will be requested and setup by ForgeGradle.
	// If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
	// then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	
	// Apply Mixin AP
	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
	
	// Hard dependencies
	implementation fg.deobf("curse.maven:farmers-delight-398521:${farmersdelight_version}")
	// Brewin' and Chewin' doesn't have a stable release for 1.20.1
	// Using local 1.20.1 build until released.
	// Versions above 1.20.1 seem to be unsupported.
	// implementation fg.deobf("curse.maven:brewin-and-chewin-637808:${brewinandchewin_version}")
	implementation fg.deobf("libs:BrewinAndChewin:1.20.1-2.0.1")
	
	// Soft dependencies
	implementation fg.deobf("curse.maven:corn-delight-577805:${corn_delight_version}")
	runtimeOnly fg.deobf("curse.maven:mysterious-mountain-lib-368098:${mmlib_version}")
	implementation fg.deobf("curse.maven:croptopia-415438:${cropotopia_version}")
	runtimeOnly fg.deobf("curse.maven:epherolib-885449:4889101")
	
	runtimeOnly fg.deobf("curse.maven:jei-238222:${jei_version}")
	runtimeOnly fg.deobf("curse.maven:appleskin-248787:${appleskin_version}")
	
	// For more info:
	// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
	// http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
	var replaceProperties = [
			minecraft_version            : minecraft_version,
			minecraft_version_range      : minecraft_version_range,
			forge_version                : forge_version,
			forge_version_range          : forge_version_range,
			mod_id                       : mod_id,
			mod_name                     : mod_name,
			mod_license                  : mod_license,
			mod_version                  : mod_version,
			mod_authors                  : mod_authors,
			mod_url                      : mod_url,
			mod_description              : mod_description,
			mod_credits                  : mod_credits,
			farmersdelight_version_range : farmersdelight_version_range,
			brewinandchewin_version_range: brewinandchewin_version_range,
			corn_delight_version_range   : corn_delight_version_range,
			cropotopia_version_range     : cropotopia_version_range,
	]
	inputs.properties replaceProperties
	
	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand replaceProperties + [project: project]
	}
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
	manifest {
		attributes([
				'Specification-Title'     : mod_id,
				'Specification-Vendor'    : mod_authors,
				'Specification-Version'   : '1', // We are version 1 of ourselves
				'Implementation-Title'    : project.name,
				'Implementation-Version'  : project.jar.archiveVersion,
				'Implementation-Vendor'   : mod_authors,
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
	
	// This is the preferred method to reobfuscate your jar file
	finalizedBy 'reobfJar'
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

// Example configuration to allow publishing using the maven-publish plugin
publishing {
	publications {
		register('mavenJava', MavenPublication) {
			artifact jar
		}
	}
	repositories {
		maven {
			url "file://${project.projectDir}/mcmodsrepo"
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
