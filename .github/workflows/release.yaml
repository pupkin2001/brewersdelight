name: Build and release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    permissions: write-all
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      MC_VERSION: 1.18.2

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle
            ~/gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('build.gradle', 'gradle/wrapper/gradle-wrapper.properties', 'gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-${{ hashFiles('build.gradle', 'gradle/wrapper/gradle-wrapper.properties', 'gradle.properties') }}
            ${{ runner.os }}-gradle-

      - name: Grant permissions to gradlew
        run: chmod +x ./gradlew

      - name: Initialize gradlew
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./gradlew

      - name: Build
        run: ./gradlew build


      - name: Capture build artifact
        uses: actions/upload-artifact@v4
        with:
          name: brewersdelight
          path: build/libs/
          if-no-files-found: error
          retention-days: 3

      - name: Get Version
        id: version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            let ref = '${{ github.ref }}';
            return ref.startsWith('refs/tags/v') ? ref.replace('refs/tags/v', '') : 'indev';

      - name: Get File Name
        run: |
          FILE_NAME=$(find build/libs/ -name "brewersdelight-${{ env.MC_VERSION }}-*.jar")
          echo "FILE_NAME=${FILE_NAME}" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        if: github.ref == 'refs/heads/stable'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          body_path: RELEASE.md
          draft: true
          prerelease: false

      - name: Upload Release Asset
        if: github.ref == 'refs/heads/stable' && steps.create_release.outputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.FILE_NAME }}
          asset_name: $(basename "${{ env.FILE_NAME }}")
          asset_content_type: application/java-archive
